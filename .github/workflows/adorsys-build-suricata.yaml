name: Build Suricata

on:
  push:
    branches: [ main, develop, "**" ]
    tags: [ "v*" ]
  pull_request:

permissions:
  contents: write  # needed to publish Releases

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-24.04
            arch: amd64
            triplet: linux-amd64
          - os: ubuntu-24.04-arm
            arch: arm64
            triplet: linux-arm64
          - os: macos-13
            arch: amd64
            triplet: macos-amd64
          - os: macos-14
            arch: arm64
            triplet: macos-arm64
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0   # needed for git describe & submodules
          submodules: false

      - name: Init submodules
        run: git submodule update --init --recursive

      # ---------- Optional caches ----------
      - name: Set up ccache (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y ccache
          echo "CC='ccache gcc'" >> $GITHUB_ENV
          echo "CXX='ccache g++'" >> $GITHUB_ENV

      - name: Restore ccache cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.ccache
          key: ccache-${{ runner.os }}-${{ matrix.arch }}-${{ github.ref }}-${{ github.sha }}
          restore-keys: |
            ccache-${{ runner.os }}-${{ matrix.arch }}-

      - name: Restore Cargo cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: cargo-${{ runner.os }}-${{ matrix.arch }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-${{ runner.os }}-${{ matrix.arch }}-

      # ---------- Dependencies ----------
      - name: Install build deps (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            autoconf automake build-essential cargo cbindgen \
            libjansson-dev libpcap-dev libpcre2-dev libtool libyaml-dev \
            make pkg-config rustc zlib1g-dev file lz4-dev
          # Optional: Hyperscan (x86_64 only)
          if [ "${{ matrix.arch }}" = "amd64" ]; then
            sudo apt-get install -y libhyperscan-dev || true
          fi

      - name: Install build deps (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install autoconf automake libtool pkg-config jansson libmagic libyaml pcre2 libpcap lz4 rust cbindgen

      # ---------- Versioning ----------
      - name: Determine version string
        id: ver
        run: |
          # Prefer tag (vX.Y.Z-*) if present, otherwise describe commit
          if [ -n "${GITHUB_REF_NAME}" ] && [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            RAW="${GITHUB_REF_NAME}"
          else
            RAW="$(git describe --tags --dirty --always || echo "untagged")"
          fi
          # normalize: strip leading v for internal VER, keep RAW for display
          echo "RAW=$RAW" >> $GITHUB_ENV
          echo "VER=${RAW#v}" >> $GITHUB_ENV
          echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      # ---------- Build from git ----------
      - name: Bootstrap (autotools)
        run: |
          # Suricata repo includes autogen.sh which runs autoreconf & friends
          ./autogen.sh

      - name: Configure
        run: |
          ./configure \
            --disable-gccmarch-native \
            --prefix=/opt/suricata \
            --sysconfdir=/etc \
            --localstatedir=/var

      - name: Build
        env:
          # Enable ccache if set
          CC: ${{ env.CC }}
          CXX: ${{ env.CXX }}
        run: |
          JOBS="$(sysctl -n hw.logicalcpu 2>/dev/null || nproc)"
          make -j"$JOBS"

      - name: Stage install & package
        run: |
          DEST="$PWD/stage"
          make DESTDIR="$DEST" install
          # bundle a small README with version info from your fork
          mkdir -p "$DEST/_meta"
          printf "Suricata %s (%s)\nBuilt from %s@%s on %s\n" \
             "${VER}" "${RAW}" "${{ github.repository }}" "${SHORT_SHA}" "$(date -u)" > "$DEST/_meta/BUILDINFO.txt"
          tar czf "suricata-${VER}-${{ matrix.triplet }}.tar.gz" -C "$DEST" .

      - name: Show build-info (sanity)
        run: |
          ./src/suricata --build-info || true

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: suricata-${{ env.VER }}-${{ matrix.triplet }}
          path: suricata-${{ env.VER }}-${{ matrix.triplet }}.tar.gz
          if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/download-artifact@v4
      - name: Publish GitHub Release with binaries
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ github.ref_name }} (from fork)
          files: "**/*.tar.gz"
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
