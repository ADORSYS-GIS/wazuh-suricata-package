name: Build Suricata

on:
  push:
    branches: [ main, develop, "**" ]
    tags: [ "v*" ]
  pull_request:

permissions:
  contents: write
  id-token: write

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-24.04
            arch: amd64
            triplet: linux-amd64
          - os: ubuntu-24.04-arm
            arch: arm64
            triplet: linux-arm64
          - os: macos-13
            arch: amd64
            triplet: macos-amd64
          - os: macos-14
            arch: arm64
            triplet: macos-arm64
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: false

      - name: Init submodules
        run: git submodule update --init --recursive

      # -------- caches --------
      - name: Restore ccache cache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ccache-${{ runner.os }}-${{ matrix.arch }}-${{ github.ref }}-${{ github.sha }}
          restore-keys: |
            ccache-${{ runner.os }}-${{ matrix.arch }}-

      - name: Restore Cargo cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: cargo-${{ runner.os }}-${{ matrix.arch }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-${{ runner.os }}-${{ matrix.arch }}-

      # ---------- Dependencies ----------
      - name: Install build deps (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            autoconf automake build-essential cargo cbindgen \
            libjansson-dev libpcap-dev libpcre2-dev libtool libyaml-dev \
            make pkg-config gcc g++ rustc zlib1g-dev file liblz4-dev ccache
          
          # Optional: Hyperscan (x86_64 only)
          if [ "${{ matrix.arch }}" = "amd64" ]; then
            sudo apt-get install -y libhyperscan-dev || true
          fi

      - name: Enable ccache (Linux) â€“ no quotes
        if: runner.os == 'Linux'
        run: |
          if command -v ccache >/dev/null 2>&1; then
            echo "CC=ccache gcc"  >> $GITHUB_ENV
            echo "CXX=ccache g++" >> $GITHUB_ENV
          else
            echo "CC=gcc"  >> $GITHUB_ENV
            echo "CXX=g++" >> $GITHUB_ENV
          fi
          # sanity:
          bash -lc '$CC --version || true'

      - name: Install build deps (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install autoconf automake libtool pkg-config jansson libmagic libyaml pkg-config pcre2 libpcap lz4 rust cbindgen coreutils
          BREW_PREFIX="$(brew --prefix)"
          {
            echo "PATH=$BREW_PREFIX/bin:$PATH"
            echo "PKG_CONFIG_PATH=$BREW_PREFIX/lib/pkgconfig:$PKG_CONFIG_PATH"
            echo "LDFLAGS=-L$BREW_PREFIX/lib $LDFLAGS"
            echo "CPPFLAGS=-I$BREW_PREFIX/include $CPPFLAGS"
          } >> $GITHUB_ENV

      # ---- SBOM/signing tools via actions ----
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      # -------- Versioning --------
      - name: Determine version string
        id: ver
        run: |
          # Prefer tag (vX.Y.Z-*) if present, otherwise describe commit
          if [ -n "${GITHUB_REF_NAME}" ] && [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            RAW="${GITHUB_REF_NAME}"
          else
            RAW="$(git describe --tags --dirty --always || echo "untagged")"
          fi
          
          # normalize: strip leading v for internal VER, keep RAW for display
          echo "RAW=$RAW" >> $GITHUB_ENV
          echo "VER=${RAW#v}" >> $GITHUB_ENV
          echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      # -------- build --------
      - name: Bootstrap (autotools)
        run: |
          # Suricata repo includes autogen.sh which runs autoreconf & friends
          ./autogen.sh

      - name: Configure
        run: |
          ./configure \
            --disable-gccmarch-native \
            --prefix=/opt/suricata \
            --sysconfdir=/etc \
            --localstatedir=/var

      - name: Build
        run: |
          JOBS="$(sysctl -n hw.logicalcpu 2>/dev/null || nproc)"
          make -j"$JOBS"

      # -------- stage + SBOM + package --------
      - name: Stage install & metadata
        run: |
          DEST="$PWD/stage"
          make DESTDIR="$DEST" install-full

          # Metadata
          mkdir -p "$DEST/_meta"
          printf "Suricata %s (%s)\nBuilt from %s@%s on %s\nRunner: %s/%s\n" \
            "${VER}" "${RAW}" "${{ github.repository }}" "${SHORT_SHA}" "$(date -u)" \
            "${{ runner.os }}" "${{ matrix.arch }}" > "$DEST/_meta/BUILDINFO.txt"

      # ---- SBOM (CycloneDX) with Syft action ----
      - name: Generate SBOM (CycloneDX JSON)
        uses: anchore/sbom-action@v0.17.2
        with:
          path: ./stage
          format: cyclonedx-json
          output-file: suricata-${{ env.VER }}-${{ matrix.triplet }}.sbom.cdx.json
          artifact-name: sbom-${{ env.VER }}-${{ matrix.triplet }}

      - name: Embed SBOM inside staged tree
        run: |
          mkdir -p stage/_meta
          cp "suricata-${VER}-${{ matrix.triplet }}.sbom.cdx.json" "stage/_meta/sbom.cdx.json"

      # -------- package + checksums --------
      - name: Create tarball + checksums
        run: |
          TAR="suricata-${VER}-${{ matrix.triplet }}.tar.gz"
          tar czf "$TAR" -C "$PWD/stage" .
          
          # checksums for both tarball and standalone SBOM
          if command -v gsha256sum >/dev/null 2>&1; then
            gsha256sum "$TAR" > "${TAR}.sha256"
            gsha256sum "suricata-${VER}-${{ matrix.triplet }}.sbom.cdx.json" > "suricata-${VER}-${{ matrix.triplet }}.sbom.cdx.json.sha256"
          else
            sha256sum "$TAR" > "${TAR}.sha256"
            sha256sum "suricata-${VER}-${{ matrix.triplet }}.sbom.cdx.json" > "suricata-${VER}-${{ matrix.triplet }}.sbom.cdx.json.sha256"
          fi

      # -------- signing (keyless) --------
      - name: Cosign sign tarball & SBOM (keyless)
        env:
          COSIGN_EXPERIMENTAL: "true"
          COSIGN_YES: "true"
        run: |
          for f in "suricata-${VER}-${{ matrix.triplet }}.tar.gz" "suricata-${VER}-${{ matrix.triplet }}.sbom.cdx.json"; do
            cosign sign-blob "$f" --output-signature "$f.sig" --output-certificate "$f.pem"
          done

      - name: Show build-info (sanity)
        run: |
          ./src/suricata --build-info || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: suricata-${{ env.VER }}-${{ matrix.triplet }}
          path: |
            suricata-${{ env.VER }}-${{ matrix.triplet }}.tar.gz
            suricata-${{ env.VER }}-${{ matrix.triplet }}.tar.gz.sha256
            suricata-${{ env.VER }}-${{ matrix.triplet }}.tar.gz.sig
            suricata-${{ env.VER }}-${{ matrix.triplet }}.tar.gz.pem
            suricata-${{ env.VER }}-${{ matrix.triplet }}.sbom.cdx.json
            suricata-${{ env.VER }}-${{ matrix.triplet }}.sbom.cdx.json.sha256
            suricata-${{ env.VER }}-${{ matrix.triplet }}.sbom.cdx.json.sig
            suricata-${{ env.VER }}-${{ matrix.triplet }}.sbom.cdx.json.pem
          if-no-files-found: error
         
  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/download-artifact@v4
      - name: Publish GitHub Release with binaries + SBOMs
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ github.ref_name }} (from fork)
          files: |
            **/*.tar.gz
            **/*.tar.gz.sha256
            **/*.tar.gz.sig
            **/*.tar.gz.pem
            **/*.sbom.cdx.json
            **/*.sbom.cdx.json.sha256
            **/*.sbom.cdx.json.sig
            **/*.sbom.cdx.json.pem
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
